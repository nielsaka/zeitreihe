% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aux_funs.R
\name{split_templ}
\alias{split_templ}
\title{Sample Splitting}
\usage{
split_templ(Nburn = 0, Npre = 0, Nest = 0, Ntrain = 0, Neval = 0,
  Noos = 0)
}
\arguments{
\item{Nburn}{An integer scalar. The number of \strong{burn-in} observations in a
simulation context. These are observations that are non-existent if the
data are actual observation and not synthetically created for simulation
purposes.}

\item{Npre}{An integer scalar. The number of \strong{pre-sample} observations for
lags etc.}

\item{Nest}{An integer scalar. The number of observations available for
\strong{estimation}.}

\item{Ntrain}{An integer scalar. The number of observations for \strong{training},
e.g. hyperparameters, forecasts.}

\item{Neval}{An integer scalar. The number of observations for model
\strong{evaluation}.}

\item{Noos}{An integer scalar. The number of \strong{true out-of-sample}
observations for simulation purposes. Can be used for evaluating the final
outcome (model choice etc.).}
}
\value{
A list with six elements. Each of which is a numeric matrix
corresponding to one of the six arguments passed to \code{split_templ}. Every
matrix has \code{K} rows and as many columns as specified in \code{split_templ}. If
an argument of \code{split_sample} is zero (the default), then the matrix will
have zero columns.
}
\description{
Create a function that will perform sample splitting. Initialise it once
by calling \code{split_templ} and then re-use where applicable.
}
\details{
The function \code{split_templ} is a template for creating another function. This
other function will accept a \code{(K x N)} matrix holding \code{N} observations of \code{K}
variables and will slice the columns of that matrix according to the numbers
passed to \code{split_templ}.
}
\examples{
p <- 2
N <- 25

Npre <- 2
Nest <- N
Noos <- 5

Nsim <- Npre + Nest + Noos

Y <- matrix(1:Nsim, 1, Nsim)
split_sample <- split_templ(Npre = Npre, Nest = Nest, Noos = Noos)
spl <- split_sample(Y)

spl$est

\dontrun{
split_sample_wrong <- split_templ(Npre = Npre, Nest = Nest)
split_sample_wrong(Y)
}
}
